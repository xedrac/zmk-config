/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/*                               GLOVE80 KEY MATRIX / LAYOUT MAPPING
 ╭────────────────────╮       ╭────────────────────╮ ╭────────────────────╮       ╭────────────────────╮
 │  0   1   2   3   4 ╰───┬───╯  5   6   7   8   9 │ │ LC5 LC4 LC3 LC2 LC1╰───┬───╯ RC1 RC2 RC3 RC4 RC5│
 │ 10  11  12  13  14  15 │ 16  17  18  19  20  21 │ │ LN5 LN4 LN3 LN2 LN1 LN0│ RN0 RN1 RN2 RN3 RN4 RN5│
 │ 22  23  24  25  26  27 │ 28  29  30  31  32  33 │ │ LT5 LT4 LT3 LT2 LT1 LT0│ RT0 RT1 RT2 RT3 RT4 RT5│
 │ 34  35  36  37  38  39 │ 40  41  42  43  44  45 │ │ LM5 LM4 LM3 LM2 LM1 LM0│ RM0 RM1 RM2 RM3 RM4 RM5│
 │ 46  47  48  49  50  51 │ 58  59  60  61  62  63 │ │ LB5 LB4 LB3 LB2 LB1 LB0│ RB0 RB1 RB2 RB3 RB4 RB5│
 │ 64  65  66  67  68 ╭───┴───╮ 75  76  77  78  79 │ │ LF5 LF4 LF3 LF2 LF1╭───┴───╮ RF1 RF2 RF3 RF4 RF5│
 ╰───────────┬────────┴───┬───┴────────┬───────────╯ ╰───────────┬────────┴───┬───┴────────┬───────────╯
             │ 52  53  54 │ 55  56  57 │                         │ LH5 LH4 LH3│ RH3 RH4 RH5│
             │ 69  70  71 │ 72  73  74 │                         │ LH2 LH1 LH0│ RH0 RH1 RH2│
             ╰────────────┴────────────╯                         ╰────────────┴────────────╯
 */

#define LC1  4  // left-ceiling row
#define LC2  3
#define LC3  2
#define LC4  1
#define LC5  0

#define RC1  5  // right-ceiling row
#define RC2  6
#define RC3  7
#define RC4  8
#define RC5  9

#define LN0 15  // left-number row
#define LN1 14
#define LN2 13
#define LN3 12
#define LN4 11
#define LN5 10

#define RN0 16  // right-number row
#define RN1 17
#define RN2 18
#define RN3 19
#define RN4 20
#define RN5 21

#define LT0 27  // left-top row
#define LT1 26
#define LT2 25
#define LT3 24
#define LT4 23
#define LT5 22

#define RT0 28  // right-top row
#define RT1 29
#define RT2 30
#define RT3 31
#define RT4 32
#define RT5 33

#define LM0 39  // left-middle row
#define LM1 38
#define LM2 37
#define LM3 36
#define LM4 35
#define LM5 34

#define RM0 40  // right-middle row
#define RM1 41
#define RM2 42
#define RM3 43
#define RM4 44
#define RM5 45

#define LB0 51  // left-bottom row
#define LB1 50
#define LB2 49
#define LB3 48
#define LB4 47
#define LB5 46

#define RB0 58  // right-bottom row
#define RB1 59
#define RB2 60
#define RB3 61
#define RB4 62
#define RB5 63

#define LF1 68  // left-floor row
#define LF2 67
#define LF3 66
#define LF4 65
#define LF5 64

#define RF1 75  // right-floor row
#define RF2 76
#define RF3 77
#define RF4 78
#define RF5 79

#define LH0 71  // left thumb keys
#define LH1 70
#define LH2 69
#define LH3 54
#define LH4 53
#define LH5 52

#define RH0 72  // right thumb keys
#define RH1 73
#define RH2 74
#define RH3 55
#define RH4 56
#define RH5 57

// layers
#define QWERTY 0
#define LOWER 1
#define MAGIC 2
#define DVORAK 3
#define HIEAMTRNS 4

/* Homerow mods */
               // glove 80 keys that need shift modifier
#define KEYS_L LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RF3 RF4  // right-hand keys
//#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys
#define THUMBS


/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        hm: homerowmods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            //flavor = "balanced";             // interrupting key press triggers modified tap on key release instead of press (or tapping-term-ms timeout)
            flavor = "hold-preferred";       // interrupting key press triggers modified tap immediately (ignores tapping-term-ms for interrpting keys)
            //flavor = "tap-preferred";        // interrupting key press only modified if hm key is held for more than tapping-term-ms, otherwise it's just a tap
            tapping-term-ms = <100>;         // how long key must be pressed to trigger hold behavior
            quick-tap-ms = <200>;            // quick tap and then hold within this time, for repeated key taps
            //require-prior-idle-ms = <125>;   // disable hold-tap behavior if typing rapidly
            //retro-tap;                       // if 1, will trigger a tap when a hold is released without another keypress
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L KEYS_R THUMBS>;
            hold-trigger-on-release;
       };

       //// HRM repeat combo
       //hm_repeat: hold_tap_repeat {
       //    flavor = "balanced";
       //    tapping-term-ms = <280>;
       //    quick-tap-ms = <250>;
       //    global-quick-tap-ms = <150>;
       //    bindings = <&kp>, <&key_repeat>;
       //    hold-trigger-key-positions = <KEYS_R THUMBS>;
       //    hold-trigger-on-release;
       //};
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 3>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
            &kp F1     &kp F2    &kp F3      &kp F4       &kp F5                                                                                        &kp F6         &kp F7        &kp F8       &kp F9    &kp F10
            &kp EQUAL  &kp N1    &kp N2      &kp N3       &kp N4        &kp N5                                                                  &kp N6  &kp N7         &kp N8        &kp N9       &kp N0    &kp MINUS
            &kp TAB    &kp Q     &kp W       &kp E        &kp R         &kp T                                                                   &kp Y   &kp U          &kp I         &kp O        &kp P     &kp BSLH
            &kp ESC    &kp A     &hm LALT S  &hm LCTRL D  &hm LSHIFT F  &kp G                                                                   &kp H   &hm RSHIFT J   &hm RCTRL K   &hm RALT L   &kp SEMI  &kp SQT
            &kp GRAVE  &kp Z     &kp X       &kp C        &kp V         &kp B   &kp LSHFT  &kp LCTRL   &layer_td  &kp LGUI  &kp RCTRL &kp RSHFT &kp N   &kp M          &kp COMMA     &kp DOT      &kp FSLH  &kp PG_UP
            &mo MAGIC  &kp HOME  &kp END     &kp LEFT     &kp RIGHT             &kp BSPC   &kp DEL     &kp LALT   &kp RALT  &kp RET   &kp SPACE         &kp UP         &kp DOWN      &kp LBKT     &kp RBKT  &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                               &kp C_MUTE   &kp C_VOL_DN  &kp C_VOL_UP    &none           &kp PAUSE_BREAK
            &trans        &none         &none       &none       &none      &kp HOME                                                       &kp LPAR     &kp KP_NUM   &kp KP_EQUAL  &kp KP_DIVIDE   &kp KP_MULTIPLY &kp PSCRN
            &trans        &none         &none       &kp UP      &none      &kp END                                                        &kp RPAR     &kp KP_N7    &kp KP_N8     &kp KP_N9       &kp KP_MINUS    &kp SLCK
            &trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                      &kp PRCNT    &kp KP_N4    &kp KP_N5     &kp KP_N6       &kp KP_PLUS     &none
            &trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to QWERTY  &trans  &trans  &trans  &kp COMMA    &kp KP_N1    &kp KP_N2     &kp KP_N3       &kp KP_ENTER    &trans
            &trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans      &trans  &trans  &trans               &kp KP_N0    &kp KP_N0     &kp KP_DOT      &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR   &none            &none           &none           &none                                                                                   &none  &none  &none  &none  &none
            &none        &none            &none           &none           &none           &none                                                            &none  &none  &none  &none  &none  &none
            &none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                  &none  &none  &none  &none  &none  &none
            &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                  &none  &none  &none  &none  &none  &bootloader
            &sys_reset   &none            &none           &none           &none           &none           &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
            &none        &none            &none           &none           &none                           &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        dvorak_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  ]    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   [  |
            // |  TAB  |  '  |  ,  |  .   |  P   |  Y   |                                                 |  F   |   G   |   C   |  R   |   L   |   \  |
            // |  ESC  |  A  |  O  |  E   |  U   |  I   |                                                 |  D   |   H   |   T   |  N   |   S   |   -  |
            // |   `   |  ;  |  Q  |  J   |  K   |  X   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  B   |   M   |   W   |  V   |   Z   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  /   |   =   | PGDN |

            bindings = <
            &kp F1     &kp F2    &kp F3      &kp F4    &kp F5                                                                                      &kp F6  &kp F7    &kp F8    &kp F9     &kp F10
            &kp RTBK   &kp N1    &kp N2      &kp N3    &kp N4     &kp N5                                                                   &kp N6  &kp N7  &kp N8    &kp N9    &kp N0     &kp LBKT
            &kp TAB    &kp SQT   &kp COMMA   &kp DOT   &kp P      &kp Y                                                                    &kp F   &kp G   &kp C     &kp R     &kp L      &kp BSLH
            &kp ESC    &kp A     &kp O       &kp E     &kp U      &kp I                                                                    &kp D   &kp H   &kp T     &kp N     &kp S      &kp MINUS
            &kp GRAVE  &kp SEMI  &kp Q       &kp J     &kp K      &kp X     &kp LSHFT  &kp LCTRL  &layer_td  &kp LGUI  &kp RCTRL &kp RSHFT &kp B   &kp M   &kp W     &kp V     &kp Z      &kp PG_UP
            &mo MAGIC  &kp HOME  &kp END     &kp LEFT  &kp RIGHT  &kp BSPC  &kp DEL    &kp LALT   &kp RALT   &kp RET   &kp SPACE                   &kp UP  &kp DOWN  &kp FSLH  &kp EQUAL  &kp PG_DN
            >;
        };

        hieamtsrn_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  ]    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   [  |
            // |  TAB  |  '  |  ,  |  .   |  P   |  Y   |                                                 |  F   |   G   |   C   |  R   |   L   |   \  |
            // |  ESC  |  A  |  O  |  E   |  U   |  I   |                                                 |  D   |   H   |   T   |  N   |   S   |   -  |
            // |   `   |  ;  |  Q  |  J   |  K   |  X   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  B   |   M   |   W   |  V   |   Z   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  /   |   =   | PGDN |

            bindings = <
            &kp F1     &kp F2    &kp F3      &kp F4    &kp F5                                                                                      &kp F6  &kp F7    &kp F8    &kp F9     &kp F10
            &kp RTBK   &kp N1    &kp N2      &kp N3    &kp N4     &kp N5                                                                   &kp N6  &kp N7  &kp N8    &kp N9    &kp N0     &kp LBKT
            &kp TAB    &kp SQT   &kp COMMA   &kp DOT   &kp P      &kp Y                                                                    &kp F   &kp G   &kp C     &kp R     &kp L      &kp BSLH
            &kp ESC    &kp A     &kp O       &kp E     &kp U      &kp I                                                                    &kp D   &kp H   &kp T     &kp N     &kp S      &kp MINUS
            &kp GRAVE  &kp SEMI  &kp Q       &kp J     &kp K      &kp X     &kp LSHFT  &kp LCTRL  &layer_td  &kp LGUI  &kp RCTRL &kp RSHFT &kp B   &kp M   &kp W     &kp V     &kp Z      &kp PG_UP
            &mo MAGIC  &kp HOME  &kp END     &kp LEFT  &kp RIGHT  &kp BSPC  &kp DEL    &kp LALT   &kp RALT   &kp RET   &kp SPACE                   &kp UP  &kp DOWN  &kp FSLH  &kp EQUAL  &kp PG_DN
            >;
        };
    };
};
